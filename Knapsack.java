import java.awt.Image;
import java.awt.image.BufferedImage;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.JOptionPane;
import java.awt.List;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.text.DecimalFormat;
import java.awt.Dimension;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Bruno Simoes, Carlos Abreu, Felipe Simoes
 */
public class JFPrincipal extends javax.swing.JFrame {
   String filename = "";
   Knapsack ks;

   /**
    * Creates new form JFPrincipal
    */
   public JFPrincipal() {
      super("Prototype");
      initComponents();
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {
   
      mb = new javax.swing.JMenuBar();
      menuFile = new javax.swing.JMenu();
      itemFile1 = new javax.swing.JMenuItem();
      menuOptions = new javax.swing.JMenu();
      itemOptions1 = new javax.swing.JMenuItem();
   
      setPreferredSize(new Dimension(200,50));
      setResizable(false);   
      setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
   
      menuFile.setText("File");
   
      itemFile1.setText("Open file");
      itemFile1.addActionListener(
         new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               itemFile1ActionPerformed(evt);
            }
         });
      menuFile.add(itemFile1);
      mb.add(menuFile);
      menuOptions.setText("Options");
      itemOptions1.setText("Run");
      
      itemOptions1.addActionListener(
         new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
               try{
                  itemOptions1ActionPerformed(evt);
               }catch(IOException e){}
            }
         });
        
      menuOptions.add(itemOptions1);
      mb.add(menuOptions);
      setJMenuBar(mb);
   
      pack();
      setLocationRelativeTo(null);
   }// </editor-fold>//GEN-END:initComponents

   private void itemFile1ActionPerformed(java.awt.event.ActionEvent evt) {
      JFileChooser fc = new JFileChooser();
      
      if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
         filename = fc.getSelectedFile().getName();
      }
   }
   
   private void itemOptions1ActionPerformed(java.awt.event.ActionEvent evt) throws IOException {
      ks = new Knapsack();
      Knapsack obj = new Knapsack();
      boolean isNumber;
      int hours = 0;
      
      if (filename.length() == 0) {
         JOptionPane.showMessageDialog(this, "Selecione o arquivo com os dados!:");
      }
      else {
         String weight = JOptionPane.showInputDialog(this, "Horas Disponiveis:");
         
         try {
            hours = (Integer.parseInt(weight));
            isNumber = true;
         } catch (NumberFormatException e) {	  
            isNumber = false;
         }
         if (isNumber){
            hours*=60;
            obj.initialize(filename, ""+hours);
            obj.knapsack();
            JOptionPane.showMessageDialog(this, "Informacoes salvas!");
         }
         else {
            JOptionPane.showMessageDialog(this, "Insira um valor valido!");
         }
      }
   }

   /**
    * @param args the command line arguments
    */
   public static void main(String args[]) {
      /* Set the Nimbus look and feel */
      //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
      /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
       * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
      try {
         for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
               javax.swing.UIManager.setLookAndFeel(info.getClassName());
               break;
            }
         }
      }
      catch (ClassNotFoundException ex) {
         java.util.logging.Logger.getLogger(JFPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (InstantiationException ex) {
         java.util.logging.Logger.getLogger(JFPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (IllegalAccessException ex) {
         java.util.logging.Logger.getLogger(JFPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      catch (javax.swing.UnsupportedLookAndFeelException ex) {
         java.util.logging.Logger.getLogger(JFPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
      }
      //</editor-fold>
   
      /* Create and display the form */
      java.awt.EventQueue.invokeLater(
         new Runnable() {
            public void run() {
               new JFPrincipal().setVisible(true);
            }
         });
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JMenuItem itemFile1;
   private javax.swing.JMenuItem itemOptions1;
   private javax.swing.JLabel lblImg;
   private javax.swing.JMenuBar mb;
   private javax.swing.JMenu menuFile;
   private javax.swing.JMenu menuOptions;
   // End of variables declaration//GEN-END:variables
   
   public class Knapsack {
   
      private int n, W; 
      private int w[];  
      private String nome[];
      private double V[][]; 
      private double v[];
      private FileWriter fileWriter;
      private BufferedWriter bufferedWriter;
      private final double SALARIO_MINIMO_HORA = 4.34;
   
      public Boolean parseInput(String input, int i, Boolean writeToFile) throws IOException {
         String parsedLine[] = input.split(",");
         if (parsedLine.length < 3) {
            System.out.println("Formato incorreto");
            return false;
         }
         nome[i] = parsedLine[0];
         try {
            v[i] = Integer.parseInt(parsedLine[1]);
         } catch (NumberFormatException e) {
            System.out.println(parsedLine[1] + " nao e um valor valido");
            return false;
         }
         try {
            w[i] = Integer.parseInt(parsedLine[2]);
         } catch (NumberFormatException e) {
            System.out.println(parsedLine[2] + " nao e um valor valido");
            return false;
         }
         if (writeToFile) {
            bufferedWriter.write(input);
            bufferedWriter.newLine();
         }
         return true;
      }
   
      private void readInput() throws IOException {
         Scanner sc = new Scanner(System.in);
         System.out.print("Quantidade de produtos : ");
         n = sc.nextInt(); //number of items
         System.out.print("Tempo disponivel em horas : ");
         W = sc.nextInt(); //capacity of knapsack
         w = new int[n];
         v = new double[n];
         nome = new String[n];
         System.out.println("Entre com o nome, valor e tempo de producao dos items, separado por virgulas : ");
         sc.nextLine();
         for (int i = 0; i < n; i++) {
            System.out.println("Item: " + (i + 1));
            String parsedLine = sc.nextLine();
            while (!parseInput(parsedLine, i, true)) {
               parsedLine = sc.nextLine();
            }
         }
         bufferedWriter.close();
      }
   
      private void openFileForInput(String inputFile, String weight) throws IOException {
         W = weight.equals("") ? 20 : Integer.parseInt(weight);
         FileReader fileReader = new FileReader(inputFile);
         String line = null;
         ArrayList < String > readStrings = new ArrayList < String > ();
         BufferedReader bufferedReader = new BufferedReader(fileReader);
         while ((line = bufferedReader.readLine()) != null) {
            readStrings.add(line.trim());
         }
         n = readStrings.size();
         w = new int[n];
         v = new double[n];
         nome = new String[n];
         for (int i = 0; i < n; i++) {
            parseInput(readStrings.get(i), i, false);
         }
      }
   
      private void initialize(String inputFile, String weight) throws IOException {
         if (inputFile.equals("")) {
            try {
               fileWriter = new FileWriter("savedItems.txt");
               bufferedWriter = new BufferedWriter(fileWriter);
            } catch (IOException e) {
            // TODO Auto-generated catch block
               e.printStackTrace();
            }
         }
         if (inputFile.equals("")) {
            readInput();
         } else {
            openFileForInput(inputFile, weight);
         }
         V = new double[n + 1][W + 1]; //initializing the table to hold results
         for (int i = 0; i <= W; i++) V[0][i] = 0;
      }
   
   /**
   * Computes the result
   */
      public void knapsack() {
      //table for backtracking to get the items chosen
         int x[][] = new int[n + 1][W + 1];
      //filling tables
         for (int i = 1; i <= n; i++)
            for (int j = 0; j <= W; j++)
               if ((w[i - 1] <= j) && (v[i - 1] + V[i - 1][j - w[i - 1]] > V[i - 1][j])) {
                  V[i][j] = v[i - 1] + V[i - 1][j - w[i - 1]];
                  x[i][j] = 1;
               }
               else {
                  V[i][j] = V[i - 1][j];
                  x[i][j] = 0;
               }
      //backtracking
         DecimalFormat df = new DecimalFormat("#.##");
         String resposta = "Para maximizar o lucro, os seguintes pedidos da lista deverão ser aceitos:\n";
         int K = W;
         for (int i = n; i >= 1; i--)
            if (x[i][K] == 1) {
            //System.out.printf("%5s%7d%7d\n", nome[i - 1], w[i - 1], v[i - 1]);
               resposta += nome[i-1] + ",\n";
               K -= w[i - 1];
            }
         double avgHour = V[n][W]/(W-K);
         resposta = resposta.substring(0, resposta.length()-2) + ".\nO lucro total é de "+ V[n][W] + " reais, com um lucro/hora de " + df.format(avgHour) + " reais." ;
         if(avgHour < SALARIO_MINIMO_HORA){
            resposta += " Esta média está abaixo do salário mínimo de " + df.format(SALARIO_MINIMO_HORA) + " reais.";
         }else{
            resposta += " Esta média está acima do salário mínimo de " + df.format(SALARIO_MINIMO_HORA);
         }
         if(K < W){
            resposta += "\nApenas " + (W-K)/60 + " horas de " + W/60 + " serão consumidas.";
         }
         System.out.println(resposta);
      /*  System.out.printf("Produtos Escolhidos\n%5s%7s%7s\n", "Item", "Tempo", "Valor");
      System.out.println("Tempo disponivel em horas: " + W + "\nLucro máximo: " + V[n][W] + " Reais\nTempo restante:" + K);*/
      }      }
}
